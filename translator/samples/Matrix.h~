#ifndef MATRIX_H
#define MATRIX_H

#include <stdlib.h>
#include <iostream>
#include <fstream>
#include <string.h>
#include "../src/readInput.h"

class Matrix {
public:
    Matrix(int i, int j) ;
    int numRows ( ) ;
    int numCols ( ) ;
    
    

    friend int numRows(&(Matrix m));
    friend int numCols();

    float *access(const int i, const int j) const ;
    friend std::ostream& operator<<(std::ostream &os, Matrix &m) ;

    Matrix readMatrix ( std::string filename ) ;

	
	
private:
    Matrix() { }
    int rows ;
    int cols ;

    /* Your implementation of "data" may vary.  There are ways in
       which data can be an array of arrays and thus simplify the
       access method, at the cost of complicating the process of
       allocating space for data.  The choice is entirely up to
       you. */
    float ** data ;
} ;


int numRows (Matrix m) ;
int numCols (Matrix m) ;
	 
	



#endif // MATRIX_H

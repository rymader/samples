#include <cxxtest/TestSuite.h>
#include <iostream> 
#include "parser.h"
#include "readInput.h"

#include <stdlib.h>
#include <string.h>
#include <fstream>

using namespace std ;

class ScannerTestSuite : public CxxTest::TestSuite 
{
public:

    Parser p ;
    ParseResult pr ;

    char **makeArgs ( const char *a0, const char *a1) {
        char **aa = (char **) malloc (sizeof(char *) * 2) ;
        aa[0] = (char *) malloc ( sizeof(char) * (strlen(a0) + 1) ) ;
        strcpy (aa[0], a0 ) ;
        aa[1] = (char *) malloc ( sizeof(char) * (strlen(a1) + 1) ) ;
        strcpy (aa[1], a1 ) ;
        return aa ;
    }

    void writeFile ( const string text, const string filename ) {
        ofstream out(filename.c_str()); 
        out << (string) text << endl ;
    }

    char *readFile ( const char *fn ) {
        return readInput (2, makeArgs("translator", fn) ) ;
    }



    void unparse_tests ( string file ) {
        string path = "../samples/" + file ; 

        // 1. Test that the file can be parsed.
        ParseResult pr1 = p.parse ( 
            readInput (2, makeArgs("translator", path.c_str() ) ) 
          ) ;
        TSM_ASSERT ( file + " failed to parse.", pr1.ok ) ;

        // 2. Verify that the ast field is not null
        TSM_ASSERT ( file + " failed to generate an AST.", pr1.ast != NULL );

        // 3. Verify that the "unparsing" is non-empty.
        string up1 = pr1.ast->unparse() ;
        writeFile(up1,(path+"up1").c_str());
        TSM_ASSERT ( file + " failed to generate non-empty unparsing.", 
                     up1.length() > 0 ) ;

        // 4. Verify that the un-parsed string can be parsed.
        ParseResult pr2 = p.parse ( up1.c_str() ) ;
        TSM_ASSERT ( file + " failed to parse the first un-parsing.", 
                     pr2.ok ) ;

        // 5. Verify that the ast field is not null after first unparsing
        TSM_ASSERT ( file + " first unparsing failed to generate an AST.", 
                     pr2.ast != NULL );

        // 6. Verify that this second unparsing can be parsed.
        string up2 = pr2.ast->unparse() ;
        writeFile(up2,(path+"up2").c_str());
        ParseResult pr3 = p.parse ( up2.c_str() ) ;
        TSM_ASSERT ( file + " failed to pares the second un-parsing.",
                     pr3.ok ) ;

        string up3 = pr3.ast->unparse() ;
        writeFile(up3,(path+"up3").c_str());
        // 7. Verify that the first and second unparsings are the same.
        TSM_ASSERT_EQUALS ( file + " unparse-1 != unparse-2.", up1, up2 ) ;
        // 8. Verifty that the second and third unparsings are the same.
        TSM_ASSERT_EQUALS ( file + " unparse-2 != unparse-3.", up2, up3 ) ;
    }

	/*! Implemented: 11/1/13 | Passed: 11/15/13 */
    void test_sample_1 ( void ) { unparse_tests ( "sample_1.dsl" ); }
    /*! Implemented: 11/1/13 | Passed: 11/15/13 */
    void test_sample_2 ( void ) { unparse_tests ( "sample_2.dsl" ); }
    /*! Implemented: 11/1/13 | Passed: 11/15/13 */
    void test_sample_3 ( void ) { unparse_tests ( "sample_3.dsl" ); }
    /*! Implemented: 11/1/13 | Passed: 11/15/13 */
    void test_sample_4 ( void ) { unparse_tests ( "sample_4.dsl" ); }
    /*! Implemented: 11/1/13 | Passed: 11/15/13 */
    void test_sample_5 ( void ) { unparse_tests ( "sample_5.dsl" ); }
    /*! Implemented: 11/1/13 | Passed: 11/15/13 */
    void test_sample_6 ( void ) { unparse_tests ( "test.dsl" ); }
    /*! Implemented: 11/1/13 | Passed: 11/15/13 */
    void test_forest_loss ( void ) { unparse_tests ( "forest_loss_v2.dsl" ); }
    
    //Regression tests:
    void parse_test(string program, string className) {
        // 1. Test that the file can be parsed.
        ParseResult pr1 = p.parse (program.c_str()); 
         
        TSM_ASSERT ( className + " test failed to parse.", pr1.ok ) ;

        // 2. Verify that the ast field is not null
        TSM_ASSERT ( className + " test failed to generate an AST.", pr1.ast != NULL );

        // 3. Verify that the "unparsing" is non-empty.
        string up1 = pr1.ast->unparse() ;
        
        TSM_ASSERT ( className + " test failed to generate non-empty unparsing.", 
                     up1.length() > 0 ) ;

        // 4. Verify that the un-parsed string can be parsed.
        ParseResult pr2 = p.parse ( up1.c_str() ) ;
        TSM_ASSERT ( className + " test failed to parse the first un-parsing.", 
                     pr2.ok ) ;

        // 5. Verify that the ast field is not null after first unparsing
        TSM_ASSERT ( className + " test first unparsing failed to generate an AST.", 
                     pr2.ast != NULL );

        // 6. Verify that this second unparsing can be parsed.
        string up2 = pr2.ast->unparse() ;
        
        ParseResult pr3 = p.parse ( up2.c_str() ) ;
        TSM_ASSERT ( className + " test failed to pares the second un-parsing.",
                     pr3.ok ) ;

        string up3 = pr3.ast->unparse() ;
        
        // 7. Verify that the first and second unparsings are the same.
        TSM_ASSERT_EQUALS ( className + " unparse-1 != unparse-2.", up1, up2 ) ;
        // 8. Verifty that the second and third unparsings are the same.
        TSM_ASSERT_EQUALS ( className + " unparse-2 != unparse-3.", up2, up3 ) ;
	}
	/*! Tests: Program Class
		Implemented: 11/17/13
		Passed: 	 11/17/13
	*/
	void test_Program(void) {parse_test("main(){}", "Program");}
	
	/*! Tests: ComplexMatrixAssignDecl Class | Implemented: 11/17/13 | Passed: 11/17/13*/
	void test_ComplexMatrixAssignDecl(void) {parse_test("main(){Matrix m[5,5] x,y = 5 + 5;}", "ComplexMatrixAssignDecl");}
	
	/*! Tests: SimpleMatrixAssignDecl Class | Implemented: 11/17/13 | Passed: 11/17/13*/
	void test_SimpleMatrixAssignDecl(void) {parse_test("main(){Matrix m = 5 + 5;}", "SimpleMatrixAssignDecl");}
	
	/*! Tests: IntKwdDecl Class | Implemented: 11/17/13 | Passed: 11/17/13*/
	void test_IntKwdDecl(void) {parse_test("main(){Integer x;}", "IntKwdDecl");}
	
	/*! Tests: FloatKwdDecl Class | Implemented: 11/17/13 | Passed: 11/17/13*/
	void test_FloatKwdDecl(void) {parse_test("main(){Float x;}", "FloatKwdDecl");}

	/*! Tests: StringKwdDecl Class | Implemented: 11/17/13 | Passed: 11/17/13*/
	void test_StringKwdDecl(void) {parse_test("main(){String x;}", "StringKwdDecl");}
	
	/*! Tests: BlockStmt Class | Implemented: 11/17/13 | Passed: 11/17/13*/	
	void test_BlockStmt(void) {parse_test("main(){{String x;}}", "BlockStmt");}

	/*! Tests: IfStmt Class | Implemented: 11/17/13 | Passed: 11/17/13*/	
	void test_IfStmt(void) {parse_test("main(){if (x) {String x;}}", "IfStmt");}
	
	/*! Tests: IfElseStmt Class | Implemented: 11/17/13 | Passed: 11/17/13*/	
	void test_IfElseStmt(void) {parse_test("main(){if (x) {String x;} else {Integer x;}}", "IfElseStmt");}
	
	/*! Tests: MatrixAssignStmt Class | Implemented: 11/17/13 | Passed: 11/17/13*/	
	void test_MatrixAssignStmt(void) {parse_test("main(){x[1,2] = 12;}", "MatrixAssignStmt");}
	
	/*! Tests: PrintStmt Class | Implemented: 11/17/13 | Passed: 11/17/13*/	
	void test_PrintStmt(void) {parse_test("main(){print(x);}", "PrintStmt");}
	
	/*! Tests: ForStmt Class | Implemented: 11/17/13 | Passed: 11/17/13*/	
	void test_ForStmt(void) {parse_test("main(){for(x = 0 to 5);}", "ForStmt");}
	
	/*! Tests: AssignStmt Class | Implemented: 11/17/13 | Passed: 11/17/13*/
	void test_AssignStmt(void) {parse_test("main(){x = 0;}", "AssignStmt");}
	
	/*! Tests: AndExpr Class | Implemented: 11/17/13 | Passed: 11/17/13*/
	void test_AndExpr(void) {parse_test("main(){if(5 && 5);}", "AndExpr");}
	
	/*! Tests: OrExpr ClassImplemented: 11/17/13 | Passed: 11/17/13*/
	void test_OrExpr(void) {parse_test("main(){if(5 || 5);}", "OrExpr");}
	
	/*! Tests: AddExpr Class | Implemented: 11/17/13 | Passed: 11/17/13*/
	void test_AddExpr(void) {parse_test("main(){if(5 + 5);}", "AddExpr");}
	
	/*! Tests: MultExpr Class | Implemented: 11/17/13 | Passed: 11/17/13*/
	void test_MultExpr(void) {parse_test("main(){if(5 * 5);}", "MultExpr");}
	
	/*! Tests: SubExpr Class | Implemented: 11/17/13 | Passed: 11/17/13*/
	void test_SubExpr(void) {parse_test("main(){if(5 - 5);}", "SubExpr");}
	
	/*! Tests: DivExpr Class | Implemented: 11/17/13 | Passed: 11/17/13*/
	void test_DivExpr(void) {parse_test("main(){if(5 / 5);}", "DivExpr");}
	
	/*! Tests: EqualsExpr Class | Implemented: 11/17/13 | Passed: 11/17/13*/
	void test_EqualsExpr(void) {parse_test("main(){if(5 == 5);}", "EqualsExpr");}
	
	/*! Tests: LessEqualExpr Class | Implemented: 11/17/13 | Passed: 11/17/13*/
	void test_LessEqualExpr(void) {parse_test("main(){if(5 <= 5);}", "LessEqualExpr");}
	
	/*! Tests: GreaterEqualExpr Class | Implemented: 11/17/13 | Passed: 11/17/13*/
	void test_GreaterEqualExpr(void) {parse_test("main(){if(5 >= 5);}", "GreaterEqualExpr");}
	
	/*! Tests: NotEqualExpr Class | Implemented: 11/17/13 | Passed: 11/17/13*/
	void test_NotEqualExpr(void) {parse_test("main(){if(5 != 5);}", "NotEqualExpr");}
	
	/*! Tests: LessExpr Class | Implemented: 11/17/13 | Passed: 11/17/13*/
	void test_LessExpr(void) {parse_test("main(){if(5 < 5);}", "LessExpr");}
	
	/*! Tests: GreaterExpr Class | Implemented: 11/17/13 | Passed: 11/17/13*/
	void test_GreaterExpr(void) {parse_test("main(){if(5 > 5);}", "GreaterExpr");}
	
	/*! Tests: IntExpr Class | Implemented: 11/17/13 | Passed: 11/17/13*/
	void test_IntExpr(void) {parse_test("main(){if(5);}", "IntExpr");}
	
	/*! Tests: FloatExpr Class | Implemented: 11/17/13 | Passed: 11/17/13*/
	void test_FloatExpr(void) {parse_test("main(){if(5.0);}", "FloatExpr");}
	
	/*! Tests: StringExpr Class | Implemented: 11/17/13 | Passed: 11/17/13*/
	void test_StringExpr(void) {parse_test("main(){if(\"5\");}", "StringExpr");}
	
	/*! Tests: NotExpr Class | Implemented: 11/17/13 | Passed: 11/17/13 */
	void test_NotExpr(void) {parse_test("main(){if(!5);}", "NotExpr");}
	
	/*! Tests: LetExpr Class | Implemented: 11/17/13 | Passed: 11/17/13*/
	void test_LetExpr(void) {parse_test("main(){if(let ; in 5 end);}", "LetExpr");}
	
	/*! Tests: IfElseExpr Class | Implemented: 11/17/13 | Passed: 11/17/13*/
	void test_IfElseExpr(void) {parse_test("main(){if(if 5 then 6 else 7);}", "IfElseExpr");}
	
	/*! Tests: ExprExpr Class | Implemented: 11/17/13 | Passed: 11/17/13 */
	void test_ExprExpr(void) {parse_test("main(){if((5));}", "ExprExpr");}
	
	/*! Tests: VarParenExpr Class | Implemented: 11/17/13 | Passed: 11/17/13 */
	void test_VarParenExpr(void) {parse_test("main(){if(a(5));}", "VarParenExpr");}
	
	/*! Tests: VarExpr Class | Implemented: 11/17/13 | Passed: 11/17/13 */
	void test_VarExpr(void) {parse_test("main(){if(x);}", "VarExpr");}
	
	/*! Tests: MatrixVarExpr Class | Implemented: 11/17/13 | Passed: 11/17/13 */
	void test_MatrixVarExpr(void) {parse_test("main(){if(x[5,5]);}", "MatrixVarExpr");}
} ;

/*************************************************************
	
	Driver file for retrieve 

	Authors:
	Ryan Mader
	Madison Hennig

**************************************************************/

#include "retrieve.h"
#include <errno.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <pthread.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main(int argc, char *argv[]) {
	
	HEAD = NULL;
	pthread_t thread;
	int num_threads = 5;
	int i;
	
	// sem_init(&sem1, 0, 0);
	// sem_init(&sem2, 0, 3);
	mutex = PTHREAD_MUTEX_INITIALIZER;
	
	// Check if value for numthreads is specified
	if (argc == 4){ 
		num_threads = atoi(argv[3]);
	}
	
	/* 
	   If numthreads not specified, check for valid
	   number of command line arguments
	*/
	else if(argc != 3) { 
		fprintf(stderr, "%s: Invalid input\n", argv[0]);
		return 1;
	}

	/* 
	   Pass client list to makeClientList in retrieve.c
	   to begin reading the file and creating a queue of 
	   client paths
	*/
	
	makeClientList(argv[1]);  

	if (pthread_create(&thread, NULL, makeClientList, argv[1]) != 0){
		perror("Error creating thread");
	}
	// create an array of threads
	pthread_t thread_id[num_threads];
	
	/*
	   Begin traversing queue of client paths and create threads for 
       each client.  
	*/ 
		for(i = 0; i < num_threads; i++){
			if (pthread_create(&thread_id[i], NULL, decrypt, argv) != 0){
				perror("Error creating threads");
			}
		}
		
		pthread_join(thread, NULL);

		for(i = 0; i<num_threads; i++){
			if(pthread_join(thread_id[i], NULL) != 0){
				perror("Error creation threads");
			}
		}	

	return 0;
}
